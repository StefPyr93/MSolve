using System;
using System.Collections.Generic;
using System.Diagnostics;
using ISAAR.MSolve.Discretization;
using ISAAR.MSolve.Discretization.FreedomDegrees;
using ISAAR.MSolve.Discretization.Integration.Quadratures;
using ISAAR.MSolve.Discretization.Interfaces;
using ISAAR.MSolve.Discretization.Mesh;
using ISAAR.MSolve.FEM.Elements;
using ISAAR.MSolve.FEM.Entities;
using ISAAR.MSolve.LinearAlgebra.Matrices;
using ISAAR.MSolve.LinearAlgebra.Vectors;
using ISAAR.MSolve.Materials;
using ISAAR.MSolve.Materials.Interfaces;
using ISAAR.MSolve.MultiscaleAnalysis.Interfaces;
using ISAAR.MSolve.Solvers.DomainDecomposition.Dual.FetiDP.CornerNodes;

namespace ISAAR.MSolve.MultiscaleAnalysis
{

    public class CompositeMaterialModeluilderTet : IdegenerateRVEbuilder
    {// test 3d
        double L01, L02, L03 ;
        double boundarySearchTol;
        IIsotropicContinuumMaterial3D outterMaterial;
        IIsotropicContinuumMaterial3D innerMaterial;

        //TODO: input material to be cloned.  
        public CompositeMaterialModeluilderTet(IIsotropicContinuumMaterial3D outterMaterial, IIsotropicContinuumMaterial3D innerMaterial,
            double L01, double L02, double L03, double boundarySearchTol = 1e-09)
        {
            this.outterMaterial = outterMaterial;
            this.innerMaterial = innerMaterial;
            this.L01 = L01;
            this.L02 = L02;
            this.L03 = L03;
            this.boundarySearchTol = boundarySearchTol;
        }

        public IRVEbuilder Clone(int a)
        {
            return new CompositeMaterialModeluilderTet(outterMaterial,innerMaterial,
                L01, L02, L03, boundarySearchTol);
        }

        public Tuple<Model, Dictionary<int, Node>, double> GetModelAndBoundaryNodes()
        {
            Model model = new Model();
            
            model.SubdomainsDictionary[0] = new Subdomain(0);
       
            var (Tet_Outter_elements_Node_data, Tet_Inner_elements_Node_data, node_coords, NodeIds, boundaryNodesIds, rigidNodes) =
                GetModelCreationData();

            for (int i1 = 0; i1 < NodeIds.Count; i1++)
            {
                int nodeID = NodeIds[i1];
                double nodeCoordX = node_coords[i1, 0];
                double nodeCoordY = node_coords[i1, 1];
                double nodeCoordZ = node_coords[i1, 2];

                model.NodesDictionary.Add(nodeID, new Node(id: nodeID, x: nodeCoordX, y: nodeCoordY, z: nodeCoordZ));
            }


            //ElasticMaterial3D .

            //define outer elements group
            int[] ContinuumTet4NodesNumbering = new int[4] { 0, 1, 2, 3 };
            int subdomainID = 0;
            var factoryOutter = new ContinuumElement3DFactory(outterMaterial, null);
            for (int i1 = 0; i1 < Tet_Outter_elements_Node_data.GetLength(0); i1++)
            {
                List<Node> nodeSet = new List<Node>();
                for (int j = 0; j < 4; j++)
                {
                    int ren1 = ContinuumTet4NodesNumbering[j];
                    int nodeID = Tet_Outter_elements_Node_data[i1, ren1+1];
                    nodeSet.Add((Node)model.NodesDictionary[nodeID]);
                }

                Element e1 = new Element()
                {
                    ID = Tet_Outter_elements_Node_data[i1,0],
                    ElementType = factoryOutter.CreateElement(CellType.Tet4, nodeSet) // dixws to e. exoume sfalma enw sto beambuilding oxi//edw kaleitai me ena orisma to Hexa8
                };

                for (int j = 0; j < 4; j++)
                {
                    int ren1 = ContinuumTet4NodesNumbering[j];
                    int nodeID = Tet_Outter_elements_Node_data[i1, ren1+1];
                    e1.NodesDictionary.Add(nodeID, model.NodesDictionary[nodeID]);
                }
                model.ElementsDictionary.Add(e1.ID, e1);
                model.SubdomainsDictionary[subdomainID].Elements.Add(e1.ID,e1);
            }

            //define inner elements group
            var factoryInner = new ContinuumElement3DFactory(innerMaterial, null);
            for (int i1 = 0; i1 < Tet_Inner_elements_Node_data.GetLength(0); i1++)
            {
                List<Node> nodeSet = new List<Node>();
                for (int j = 0; j < 4; j++)
                {
                    int ren1 = ContinuumTet4NodesNumbering[j];
                    int nodeID = Tet_Inner_elements_Node_data[i1, ren1 + 1];
                    nodeSet.Add((Node)model.NodesDictionary[nodeID]);
                }

                Element e1 = new Element()
                {
                    ID = Tet_Inner_elements_Node_data[i1, 0],
                    ElementType = factoryInner.CreateElement(CellType.Tet4, nodeSet) // dixws to e. exoume sfalma enw sto beambuilding oxi//edw kaleitai me ena orisma to Hexa8
                };

                for (int j = 0; j < 4; j++)
                {
                    int ren1 = ContinuumTet4NodesNumbering[j];
                    int nodeID = Tet_Inner_elements_Node_data[i1, ren1 + 1];
                    e1.NodesDictionary.Add(nodeID, model.NodesDictionary[nodeID]);
                }
                model.ElementsDictionary.Add(e1.ID, e1);
                model.SubdomainsDictionary[subdomainID].Elements.Add(e1.ID,e1);
            }

            Dictionary<int, Node> boundaryNodes = new Dictionary<int, Node>();

            for (int i = 0; i < boundaryNodesIds.Count; i++)
            {
                boundaryNodes.Add(boundaryNodesIds[i], model.NodesDictionary[boundaryNodesIds[i]]);
            }




            return  new Tuple<Model, Dictionary<int, Node>, double>(model, boundaryNodes, L01*L02*L03); 
        }

        public Dictionary<Node, IList<IDofType>> GetModelRigidBodyNodeConstraints(Model model)
        {
            
            Dictionary<Node, IList<IDofType>> RigidBodyNodeConstraints = new Dictionary<Node, IList<IDofType>>();
            var rigidNodes = RigidNodes;

            RigidBodyNodeConstraints.Add(model.NodesDictionary[rigidNodes[0]], new List<IDofType>() { StructuralDof.TranslationX, StructuralDof.TranslationY, StructuralDof.TranslationZ });
            RigidBodyNodeConstraints.Add(model.NodesDictionary[rigidNodes[1]], new List<IDofType>() { StructuralDof.TranslationX, StructuralDof.TranslationY, StructuralDof.TranslationZ });
            RigidBodyNodeConstraints.Add(model.NodesDictionary[rigidNodes[2]], new List<IDofType>() { StructuralDof.TranslationX, StructuralDof.TranslationY, StructuralDof.TranslationZ });

            return RigidBodyNodeConstraints;
        }



        private List<int> RigidNodes => new List<int>
        {
            { 1},
                {101 },
                {21 }
        };

        private static (int[,], int[,], double[,], List<int>, List<int>, List<int>) GetModelCreationData()
        {
            var Tet_Outter_elements_Node_data = new int[,] {
            {1,1,2,26,6},
{2,2,6,27,26},
{3,6,26,31,27},
{4,2,7,27,6},
{5,7,6,31,27},
{6,7,31,32,27},
{7,2,3,27,7},
{8,3,7,28,27},
{9,7,27,32,28},
{10,3,8,28,7},
{11,8,7,32,28},
{12,8,32,33,28},
{13,3,4,28,8},
{14,4,8,29,28},
{15,8,28,33,29},
{16,4,9,29,8},
{17,9,8,33,29},
{18,9,33,34,29},
{19,4,5,29,9},
{20,5,9,30,29},
{21,9,29,34,30},
{22,5,10,30,9},
{23,10,9,34,30},
{24,10,34,35,30},
{25,6,7,31,11},
{26,7,11,32,31},
{27,11,31,36,32},
{28,7,12,32,11},
{29,12,11,36,32},
{30,12,36,37,32},
{31,7,8,32,12},
{32,8,12,33,32},
{33,12,32,37,33},
{34,8,13,33,12},
{35,13,12,37,33},
{36,13,37,38,33},
{37,8,9,33,13},
{38,9,13,34,33},
{39,13,33,38,34},
{40,9,14,34,13},
{41,14,13,38,34},
{42,14,38,39,34},
{43,9,10,34,14},
{44,10,14,35,34},
{45,14,34,39,35},
{46,10,15,35,14},
{47,15,14,39,35},
{48,15,39,40,35},
{49,11,12,36,16},
{50,12,16,37,36},
{51,16,36,41,37},
{52,12,17,37,16},
{53,17,16,41,37},
{54,17,41,42,37},
{55,12,13,37,17},
{56,13,17,38,37},
{57,17,37,42,38},
{58,13,18,38,17},
{59,18,17,42,38},
{60,18,42,43,38},
{61,13,14,38,18},
{62,14,18,39,38},
{63,18,38,43,39},
{64,14,19,39,18},
{65,19,18,43,39},
{66,19,43,44,39},
{67,14,15,39,19},
{68,15,19,40,39},
{69,19,39,44,40},
{70,15,20,40,19},
{71,20,19,44,40},
{72,20,44,45,40},
{73,16,17,41,21},
{74,17,21,42,41},
{75,21,41,46,42},
{76,17,22,42,21},
{77,22,21,46,42},
{78,22,46,47,42},
{79,17,18,42,22},
{80,18,22,43,42},
{81,22,42,47,43},
{82,18,23,43,22},
{83,23,22,47,43},
{84,23,47,48,43},
{85,18,19,43,23},
{86,19,23,44,43},
{87,23,43,48,44},
{88,19,24,44,23},
{89,24,23,48,44},
{90,24,48,49,44},
{91,19,20,44,24},
{92,20,24,45,44},
{93,24,44,49,45},
{94,20,25,45,24},
{95,25,24,49,45},
{96,25,49,50,45},
{97,26,27,51,31},
{98,27,31,52,51},
{99,31,51,56,52},
{100,27,32,52,31},
{101,32,31,56,52},
{102,32,56,57,52},
{103,27,28,52,32},
{104,28,32,53,52},
{105,32,52,57,53},
{106,28,33,53,32},
{107,33,32,57,53},
{108,33,57,58,53},
{109,28,29,53,33},
{110,29,33,54,53},
{111,33,53,58,54},
{112,29,34,54,33},
{113,34,33,58,54},
{114,34,58,59,54},
{115,29,30,54,34},
{116,30,34,55,54},
{117,34,54,59,55},
{118,30,35,55,34},
{119,35,34,59,55},
{120,35,59,60,55},
{169,41,42,66,46},
{170,42,46,67,66},
{171,46,66,71,67},
{172,42,47,67,46},
{173,47,46,71,67},
{174,47,71,72,67},
{175,42,43,67,47},
{176,43,47,68,67},
{177,47,67,72,68},
{178,43,48,68,47},
{179,48,47,72,68},
{180,48,72,73,68},
{181,43,44,68,48},
{182,44,48,69,68},
{183,48,68,73,69},
{184,44,49,69,48},
{185,49,48,73,69},
{186,49,73,74,69},
{187,44,45,69,49},
{188,45,49,70,69},
{189,49,69,74,70},
{190,45,50,70,49},
{191,50,49,74,70},
{192,50,74,75,70},
{193,51,52,76,56},
{194,52,56,77,76},
{195,56,76,81,77},
{196,52,57,77,56},
{197,57,56,81,77},
{198,57,81,82,77},
{199,52,53,77,57},
{200,53,57,78,77},
{201,57,77,82,78},
{202,53,58,78,57},
{203,58,57,82,78},
{204,58,82,83,78},
{205,53,54,78,58},
{206,54,58,79,78},
{207,58,78,83,79},
{208,54,59,79,58},
{209,59,58,83,79},
{210,59,83,84,79},
{211,54,55,79,59},
{212,55,59,80,79},
{213,59,79,84,80},
{214,55,60,80,59},
{215,60,59,84,80},
{216,60,84,85,80},
{265,66,67,91,71},
{266,67,71,92,91},
{267,71,91,96,92},
{268,67,72,92,71},
{269,72,71,96,92},
{270,72,96,97,92},
{271,67,68,92,72},
{272,68,72,93,92},
{273,72,92,97,93},
{274,68,73,93,72},
{275,73,72,97,93},
{276,73,97,98,93},
{277,68,69,93,73},
{278,69,73,94,93},
{279,73,93,98,94},
{280,69,74,94,73},
{281,74,73,98,94},
{282,74,98,99,94},
{283,69,70,94,74},
{284,70,74,95,94},
{285,74,94,99,95},
{286,70,75,95,74},
{287,75,74,99,95},
{288,75,99,100,95},
{289,76,77,101,81},
{290,77,81,102,101},
{291,81,101,106,102},
{292,77,82,102,81},
{293,82,81,106,102},
{294,82,106,107,102},
{295,77,78,102,82},
{296,78,82,103,102},
{297,82,102,107,103},
{298,78,83,103,82},
{299,83,82,107,103},
{300,83,107,108,103},
{301,78,79,103,83},
{302,79,83,104,103},
{303,83,103,108,104},
{304,79,84,104,83},
{305,84,83,108,104},
{306,84,108,109,104},
{307,79,80,104,84},
{308,80,84,105,104},
{309,84,104,109,105},
{310,80,85,105,84},
{311,85,84,109,105},
{312,85,109,110,105},
{313,81,82,106,86},
{314,82,86,107,106},
{315,86,106,111,107},
{316,82,87,107,86},
{317,87,86,111,107},
{318,87,111,112,107},
{319,82,83,107,87},
{320,83,87,108,107},
{321,87,107,112,108},
{322,83,88,108,87},
{323,88,87,112,108},
{324,88,112,113,108},
{325,83,84,108,88},
{326,84,88,109,108},
{327,88,108,113,109},
{328,84,89,109,88},
{329,89,88,113,109},
{330,89,113,114,109},
{331,84,85,109,89},
{332,85,89,110,109},
{333,89,109,114,110},
{334,85,90,110,89},
{335,90,89,114,110},
{336,90,114,115,110},
{337,86,87,111,91},
{338,87,91,112,111},
{339,91,111,116,112},
{340,87,92,112,91},
{341,92,91,116,112},
{342,92,116,117,112},
{343,87,88,112,92},
{344,88,92,113,112},
{345,92,112,117,113},
{346,88,93,113,92},
{347,93,92,117,113},
{348,93,117,118,113},
{349,88,89,113,93},
{350,89,93,114,113},
{351,93,113,118,114},
{352,89,94,114,93},
{353,94,93,118,114},
{354,94,118,119,114},
{355,89,90,114,94},
{356,90,94,115,114},
{357,94,114,119,115},
{358,90,95,115,94},
{359,95,94,119,115},
{360,95,119,120,115},
{361,91,92,116,96},
{362,92,96,117,116},
{363,96,116,121,117},
{364,92,97,117,96},
{365,97,96,121,117},
{366,97,121,122,117},
{367,92,93,117,97},
{368,93,97,118,117},
{369,97,117,122,118},
{370,93,98,118,97},
{371,98,97,122,118},
{372,98,122,123,118},
{373,93,94,118,98},
{374,94,98,119,118},
{375,98,118,123,119},
{376,94,99,119,98},
{377,99,98,123,119},
{378,99,123,124,119},
{379,94,95,119,99},
{380,95,99,120,119},
{381,99,119,124,120},
{382,95,100,120,99},
{383,100,99,124,120},
{384,100,124,125,120}};

            var Tet_Inner_elements_Node_data = new int[,] {
            {121,31,32,56,36},
{122,32,36,57,56},
{123,36,56,61,57},
{124,32,37,57,36},
{125,37,36,61,57},
{126,37,61,62,57},
{127,32,33,57,37},
{128,33,37,58,57},
{129,37,57,62,58},
{130,33,38,58,37},
{131,38,37,62,58},
{132,38,62,63,58},
{133,33,34,58,38},
{134,34,38,59,58},
{135,38,58,63,59},
{136,34,39,59,38},
{137,39,38,63,59},
{138,39,63,64,59},
{139,34,35,59,39},
{140,35,39,60,59},
{141,39,59,64,60},
{142,35,40,60,39},
{143,40,39,64,60},
{144,40,64,65,60},
{145,36,37,61,41},
{146,37,41,62,61},
{147,41,61,66,62},
{148,37,42,62,41},
{149,42,41,66,62},
{150,42,66,67,62},
{151,37,38,62,42},
{152,38,42,63,62},
{153,42,62,67,63},
{154,38,43,63,42},
{155,43,42,67,63},
{156,43,67,68,63},
{157,38,39,63,43},
{158,39,43,64,63},
{159,43,63,68,64},
{160,39,44,64,43},
{161,44,43,68,64},
{162,44,68,69,64},
{163,39,40,64,44},
{164,40,44,65,64},
{165,44,64,69,65},
{166,40,45,65,44},
{167,45,44,69,65},
{168,45,69,70,65},
{217,56,57,81,61},
{218,57,61,82,81},
{219,61,81,86,82},
{220,57,62,82,61},
{221,62,61,86,82},
{222,62,86,87,82},
{223,57,58,82,62},
{224,58,62,83,82},
{225,62,82,87,83},
{226,58,63,83,62},
{227,63,62,87,83},
{228,63,87,88,83},
{229,58,59,83,63},
{230,59,63,84,83},
{231,63,83,88,84},
{232,59,64,84,63},
{233,64,63,88,84},
{234,64,88,89,84},
{235,59,60,84,64},
{236,60,64,85,84},
{237,64,84,89,85},
{238,60,65,85,64},
{239,65,64,89,85},
{240,65,89,90,85},
{241,61,62,86,66},
{242,62,66,87,86},
{243,66,86,91,87},
{244,62,67,87,66},
{245,67,66,91,87},
{246,67,91,92,87},
{247,62,63,87,67},
{248,63,67,88,87},
{249,67,87,92,88},
{250,63,68,88,67},
{251,68,67,92,88},
{252,68,92,93,88},
{253,63,64,88,68},
{254,64,68,89,88},
{255,68,88,93,89},
{256,64,69,89,68},
{257,69,68,93,89},
{258,69,93,94,89},
{259,64,65,89,69},
{260,65,69,90,89},
{261,69,89,94,90},
{262,65,70,90,69},
{263,70,69,94,90},
{264,70,94,95,90} };


            double[,] node_coords = new double[,]
                {{-50.0000000000000000,-50.0000000000000000,-50.0000000000000000},
{-50.0000000000000000,-50.0000000000000000,-25.0000000000000000},
{-50.0000000000000000,-50.0000000000000000,0.0000000000000000},
{-50.0000000000000000,-50.0000000000000000,25.0000000000000000},
{-50.0000000000000000,-50.0000000000000000,50.0000000000000000},
{-50.0000000000000000,-25.0000000000000000,-50.0000000000000000},
{-50.0000000000000000,-25.0000000000000000,-25.0000000000000000},
{-50.0000000000000000,-25.0000000000000000,0.0000000000000000},
{-50.0000000000000000,-25.0000000000000000,25.0000000000000000},
{-50.0000000000000000,-25.0000000000000000,50.0000000000000000},
{-50.0000000000000000,0.0000000000000000,-50.0000000000000000},
{-50.0000000000000000,0.0000000000000000,-25.0000000000000000},
{-50.0000000000000000,0.0000000000000000,0.0000000000000000},
{-50.0000000000000000,0.0000000000000000,25.0000000000000000},
{-50.0000000000000000,0.0000000000000000,50.0000000000000000},
{-50.0000000000000000,25.0000000000000000,-50.0000000000000000},
{-50.0000000000000000,25.0000000000000000,-25.0000000000000000},
{-50.0000000000000000,25.0000000000000000,0.0000000000000000},
{-50.0000000000000000,25.0000000000000000,25.0000000000000000},
{-50.0000000000000000,25.0000000000000000,50.0000000000000000},
{-50.0000000000000000,50.0000000000000000,-50.0000000000000000},
{-50.0000000000000000,50.0000000000000000,-25.0000000000000000},
{-50.0000000000000000,50.0000000000000000,0.0000000000000000},
{-50.0000000000000000,50.0000000000000000,25.0000000000000000},
{-50.0000000000000000,50.0000000000000000,50.0000000000000000},
{-25.0000000000000000,-50.0000000000000000,-50.0000000000000000},
{-25.0000000000000000,-50.0000000000000000,-25.0000000000000000},
{-25.0000000000000000,-50.0000000000000000,0.0000000000000000},
{-25.0000000000000000,-50.0000000000000000,25.0000000000000000},
{-25.0000000000000000,-50.0000000000000000,50.0000000000000000},
{-25.0000000000000000,-25.0000000000000000,-50.0000000000000000},
{-25.0000000000000000,-25.0000000000000000,-25.0000000000000000},
{-25.0000000000000000,-25.0000000000000000,0.0000000000000000},
{-25.0000000000000000,-25.0000000000000000,25.0000000000000000},
{-25.0000000000000000,-25.0000000000000000,50.0000000000000000},
{-25.0000000000000000,0.0000000000000000,-50.0000000000000000},
{-25.0000000000000000,0.0000000000000000,-25.0000000000000000},
{-25.0000000000000000,0.0000000000000000,0.0000000000000000},
{-25.0000000000000000,0.0000000000000000,25.0000000000000000},
{-25.0000000000000000,0.0000000000000000,50.0000000000000000},
{-25.0000000000000000,25.0000000000000000,-50.0000000000000000},
{-25.0000000000000000,25.0000000000000000,-25.0000000000000000},
{-25.0000000000000000,25.0000000000000000,0.0000000000000000},
{-25.0000000000000000,25.0000000000000000,25.0000000000000000},
{-25.0000000000000000,25.0000000000000000,50.0000000000000000},
{-25.0000000000000000,50.0000000000000000,-50.0000000000000000},
{-25.0000000000000000,50.0000000000000000,-25.0000000000000000},
{-25.0000000000000000,50.0000000000000000,0.0000000000000000},
{-25.0000000000000000,50.0000000000000000,25.0000000000000000},
{-25.0000000000000000,50.0000000000000000,50.0000000000000000},
{0.0000000000000000,-50.0000000000000000,-50.0000000000000000},
{0.0000000000000000,-50.0000000000000000,-25.0000000000000000},
{0.0000000000000000,-50.0000000000000000,0.0000000000000000},
{0.0000000000000000,-50.0000000000000000,25.0000000000000000},
{0.0000000000000000,-50.0000000000000000,50.0000000000000000},
{0.0000000000000000,-25.0000000000000000,-50.0000000000000000},
{0.0000000000000000,-25.0000000000000000,-25.0000000000000000},
{0.0000000000000000,-25.0000000000000000,0.0000000000000000},
{0.0000000000000000,-25.0000000000000000,25.0000000000000000},
{0.0000000000000000,-25.0000000000000000,50.0000000000000000},
{0.0000000000000000,0.0000000000000000,-50.0000000000000000},
{0.0000000000000000,0.0000000000000000,-25.0000000000000000},
{0.0000000000000000,0.0000000000000000,0.0000000000000000},
{0.0000000000000000,0.0000000000000000,25.0000000000000000},
{0.0000000000000000,0.0000000000000000,50.0000000000000000},
{0.0000000000000000,25.0000000000000000,-50.0000000000000000},
{0.0000000000000000,25.0000000000000000,-25.0000000000000000},
{0.0000000000000000,25.0000000000000000,0.0000000000000000},
{0.0000000000000000,25.0000000000000000,25.0000000000000000},
{0.0000000000000000,25.0000000000000000,50.0000000000000000},
{0.0000000000000000,50.0000000000000000,-50.0000000000000000},
{0.0000000000000000,50.0000000000000000,-25.0000000000000000},
{0.0000000000000000,50.0000000000000000,0.0000000000000000},
{0.0000000000000000,50.0000000000000000,25.0000000000000000},
{0.0000000000000000,50.0000000000000000,50.0000000000000000},
{25.0000000000000000,-50.0000000000000000,-50.0000000000000000},
{25.0000000000000000,-50.0000000000000000,-25.0000000000000000},
{25.0000000000000000,-50.0000000000000000,0.0000000000000000},
{25.0000000000000000,-50.0000000000000000,25.0000000000000000},
{25.0000000000000000,-50.0000000000000000,50.0000000000000000},
{25.0000000000000000,-25.0000000000000000,-50.0000000000000000},
{25.0000000000000000,-25.0000000000000000,-25.0000000000000000},
{25.0000000000000000,-25.0000000000000000,0.0000000000000000},
{25.0000000000000000,-25.0000000000000000,25.0000000000000000},
{25.0000000000000000,-25.0000000000000000,50.0000000000000000},
{25.0000000000000000,0.0000000000000000,-50.0000000000000000},
{25.0000000000000000,0.0000000000000000,-25.0000000000000000},
{25.0000000000000000,0.0000000000000000,0.0000000000000000},
{25.0000000000000000,0.0000000000000000,25.0000000000000000},
{25.0000000000000000,0.0000000000000000,50.0000000000000000},
{25.0000000000000000,25.0000000000000000,-50.0000000000000000},
{25.0000000000000000,25.0000000000000000,-25.0000000000000000},
{25.0000000000000000,25.0000000000000000,0.0000000000000000},
{25.0000000000000000,25.0000000000000000,25.0000000000000000},
{25.0000000000000000,25.0000000000000000,50.0000000000000000},
{25.0000000000000000,50.0000000000000000,-50.0000000000000000},
{25.0000000000000000,50.0000000000000000,-25.0000000000000000},
{25.0000000000000000,50.0000000000000000,0.0000000000000000},
{25.0000000000000000,50.0000000000000000,25.0000000000000000},
{25.0000000000000000,50.0000000000000000,50.0000000000000000},
{50.0000000000000000,-50.0000000000000000,-50.0000000000000000},
{50.0000000000000000,-50.0000000000000000,-25.0000000000000000},
{50.0000000000000000,-50.0000000000000000,0.0000000000000000},
{50.0000000000000000,-50.0000000000000000,25.0000000000000000},
{50.0000000000000000,-50.0000000000000000,50.0000000000000000},
{50.0000000000000000,-25.0000000000000000,-50.0000000000000000},
{50.0000000000000000,-25.0000000000000000,-25.0000000000000000},
{50.0000000000000000,-25.0000000000000000,0.0000000000000000},
{50.0000000000000000,-25.0000000000000000,25.0000000000000000},
{50.0000000000000000,-25.0000000000000000,50.0000000000000000},
{50.0000000000000000,0.0000000000000000,-50.0000000000000000},
{50.0000000000000000,0.0000000000000000,-25.0000000000000000},
{50.0000000000000000,0.0000000000000000,0.0000000000000000},
{50.0000000000000000,0.0000000000000000,25.0000000000000000},
{50.0000000000000000,0.0000000000000000,50.0000000000000000},
{50.0000000000000000,25.0000000000000000,-50.0000000000000000},
{50.0000000000000000,25.0000000000000000,-25.0000000000000000},
{50.0000000000000000,25.0000000000000000,0.0000000000000000},
{50.0000000000000000,25.0000000000000000,25.0000000000000000},
{50.0000000000000000,25.0000000000000000,50.0000000000000000},
{50.0000000000000000,50.0000000000000000,-50.0000000000000000},
{50.0000000000000000,50.0000000000000000,-25.0000000000000000},
{50.0000000000000000,50.0000000000000000,0.0000000000000000},
{50.0000000000000000,50.0000000000000000,25.0000000000000000},
{50.0000000000000000,50.0000000000000000,50.0000000000000000}};
                    

            List<int> NodeIds = new List<int>{{1},
{2},
{3},
{4},
{5},
{6},
{7},
{8},
{9},
{10},
{11},
{12},
{13},
{14},
{15},
{16},
{17},
{18},
{19},
{20},
{21},
{22},
{23},
{24},
{25},
{26},
{27},
{28},
{29},
{30},
{31},
{32},
{33},
{34},
{35},
{36},
{37},
{38},
{39},
{40},
{41},
{42},
{43},
{44},
{45},
{46},
{47},
{48},
{49},
{50},
{51},
{52},
{53},
{54},
{55},
{56},
{57},
{58},
{59},
{60},
{61},
{62},
{63},
{64},
{65},
{66},
{67},
{68},
{69},
{70},
{71},
{72},
{73},
{74},
{75},
{76},
{77},
{78},
{79},
{80},
{81},
{82},
{83},
{84},
{85},
{86},
{87},
{88},
{89},
{90},
{91},
{92},
{93},
{94},
{95},
{96},
{97},
{98},
{99},
{100},
{101},
{102},
{103},
{104},
{105},
{106},
{107},
{108},
{109},
{110},
{111},
{112},
{113},
{114},
{115},
{116},
{117},
{118},
{119},
{120},
{121},
{122},
{123},
{124},
{125}};


            List<int> boundaryNodesIds = new List<int>{{1},
{2},
{3},
{4},
{5},
{6},
{7},
{8},
{9},
{10},
{11},
{12},
{13},
{14},
{15},
{16},
{17},
{18},
{19},
{20},
{21},
{22},
{23},
{24},
{25},
{26},
{27},
{28},
{29},
{30},
{46},
{47},
{48},
{49},
{50},
{51},
{52},
{53},
{54},
{55},
{71},
{72},
{73},
{74},
{75},
{76},
{77},
{78},
{79},
{80},
{96},
{97},
{98},
{99},
{100},
{101},
{102},
{103},
{104},
{105},
{106},
{107},
{108},
{109},
{110},
{111},
{112},
{113},
{114},
{115},
{116},
{117},
{118},
{119},
{120},
{121},
{122},
{123},
{124},
{125}};

            List<int> rigidNodes = new List<int>
            {
                { 1},
                {101 },
                {21 }
            };

            return (Tet_Outter_elements_Node_data, Tet_Inner_elements_Node_data, node_coords, NodeIds, boundaryNodesIds, rigidNodes);
        }

             

        
    }
}
